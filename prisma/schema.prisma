// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations: 
  posts Post[]
  comments Comment[]
  likes Like[]

  followers Follows[] @relation("following")
  following Follows[] @relation("follower")

  notifications Notification[] @relation("userNotifications")
  notificationsCreated Notification[] @relation("notificationCreator")

  // Add these indexes for search optimization
  @@index([username])
  @@index([name])

  createdGroups      Group[]         @relation("CreatedGroups")
  groupMemberships   GroupMember[]
  groupMessages      GroupMessage[]

  bookmarks Bookmark[]

  badgeText        String?   @db.VarChar(30) // Limit to 30 chars (roughly 3 words)
  badgeColor       String?   @default("blue") // Default badge color
  badgeEnabled     Boolean   @default(false) // Whether badge is displayed
}

model Post {
  id        String    @id @default(cuid())
  authorId String
  content String?
  image String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  author User @relation(fields: [authorId],references: [id], onDelete: Cascade)
  comments Comment[]
  likes Like[]
  notifications Notification[]

  bookmarks Bookmark[]

  // Add this index for content search
  @@index([content])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
}

model Comment{
  id String @id @default(cuid())
  content String
  authorId String
  postId String
  createdAt DateTime @default(now())

  // Relations
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id], onDelete: Cascade)
  notifications Notification[]

  @@index([authorId,postId]) // composite index for faster queries
}

model Like {
  id        String   @id @default(cuid())
  postId    String                 
  userId    String                 
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId,postId]) // composite index for faster queries
  @@unique([userId,postId]) // this prevents same user liking post twice
}

model Follows{
  followerId String
  followingId String
  createdAt DateTime @default(now())

  // Relations
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId,followingId]) // composite index for faster queries
  @@id([followerId, followingId]) // composite primary key prevents duplicate follows
}

model Notification {
  id        String   @id @default(cuid())
  userId    String                  
  creatorId String                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?                 
  commentId String?                
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW   
}

// Adding groups schemas

model Group {
  id          String    @id @default(cuid())
  name        String
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  createdBy   User      @relation("CreatedGroups", fields: [creatorId], references: [id])
  creatorId   String
  members     GroupMember[]
  messages    GroupMessage[]

  @@index([name])
}

model GroupMember {
  id        String   @id @default(cuid())
  joinedAt  DateTime @default(now())
  role      String   @default("MEMBER") // Can be "ADMIN" or "MEMBER"
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String

  @@unique([userId, groupId])
}

model GroupMessage {
  id        String   @id @default(cuid())
  content   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
}